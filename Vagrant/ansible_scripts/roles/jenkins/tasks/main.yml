---
- name: define jenkins_repo_url
  set_fact:
    jenkins_repo_url: deb https://pkg.jenkins.io/debian binary/
  when: jenkins_repo_url is not defined
  tags: jenkins

- name: define jenkins_repo_key_url
  set_fact:
    jenkins_repo_key_url: https://pkg.jenkins.io/debian/jenkins.io.key
  when: jenkins_repo_key_url is not defined
  tags: jenkins

- name: define jenkins_pkg_url
  set_fact:
    jenkins_pkg_url: https://pkg.jenkins.io/debian/binary
  when: jenkins_pkg_url is not defined
  tags: jenkins

- name: download Jenkins
  get_url:
    url: "{{ jenkins_pkg_url }}/jenkins_2.96_all.deb"
    dest: "/tmp/jenkins_2.96_all.deb"
  tags: jenkins

- name: check if we downloaded Jenkins.
  stat:
    path: "/tmp/jenkins_2.96_all.deb"
  tags: jenkins

- name: install Jenkins
  apt:
    deb: "/tmp/jenkins_2.96_all.deb"
    state: present
  register: is_installed
  tags: jenkins

- name: ensure Jenkins is installed
  apt:
    name: jenkins
    state: present
  tags: jenkins
- name: set the jenkins shell
  user:
    name: jenkins
    shell: /bin/bash
  tags: jenkins

- name: ensure .ssh folder exists
  file:
    path: /var/lib/jenkins/.ssh
    state: directory
    owner: jenkins
    group: jenkins
    mode: 0700
  tags: jenkins

- name: ensure jenkins.install.UpgradeWizard.state exists
  wait_for:
    path: /var/lib/jenkins/jenkins.install.UpgradeWizard.state
    state: present
  tags: jenkins

- name: create initialization scripts directory
  file: 
    path: /var/lib/jenkins/init.groovy.d
    state: directory
    owner: jenkins
    group: jenkins
    mode: 0775
  tags: jenkins

- name: wait for initialAdminPassword
  wait_for: 
    path: /var/lib/jenkins/secrets/initialAdminPassword
    state: present
  when: is_installed.changed
  tags: jenkins

- stat: 
    path: /var/lib/jenkins/secrets/initialAdminPassword
  register: adminpassword
  tags: jenkins

- name: bypass - initialAdminPassword
  shell: mv /var/lib/jenkins/secrets/initialAdminPassword /root
  notify: restart jenkins
  when: adminpassword.stat.exists == True
  tags: jenkins

- name: bypass - jenkins.install.InstallUtil.lastExecVersion
  copy: 
    src: /var/lib/jenkins/jenkins.install.UpgradeWizard.state
    dest: /var/lib/jenkins/jenkins.install.InstallUtil.lastExecVersion
    owner: jenkins
    group: jenkins
    remote_src: True
  notify: restart jenkins
  tags: jenkins

- name: ensure jenkins is started and runs on startup.
  service:
    name: jenkins
    state: started
    enabled: yes
  tags: jenkins

- name: wait for config file
  wait_for: 
    path: /var/lib/jenkins/config.xml
    state: present
  tags: jenkins
  
- name: skip install plugin wizzard
  template: 
    src: config_jenkins.xml.j2
    dest: /var/lib/jenkins/config.xml
  notify: restart jenkins
  tags: jenkins

- name: copy config.xml for admin
  template:
    src: config_admin.xml.j2
    dest: /var/lib/jenkins/users/admin/config.xml
    owner: jenkins
    group: jenkins
    force: yes
  when: is_installed.changed
  notify: restart jenkins
  tags:
    - jenkins
    - skip_ansible_lint

- name: restart jenkins
  meta: flush_handlers
  tags: jenkins

- name: Get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10

- name: list users
  find:
    paths: /var/lib/jenkins/users
    file_type: directory
  changed_when: False
  become: yes
  become_user: jenkins
  register: user_list
  tags: jenkins

- name: create users
  shell: "echo 'jenkins.model.Jenkins.instance.securityRealm.createAccount(\"{{ item }}\", \"{{ jenkins_users[item].password }}\")' | java -jar {{ jenkins_jar_location }} -auth {{ admin.username }}:{{ admin.password }} -s http://localhost:8080/ groovy ="
  with_items: "{{ jenkins_users }}"
  become: yes
  become_user: jenkins
  when: '"{{ item }}" not in "{{ user_list.files }}"'
  tags: jenkins

- name: install plugins
  include: plugins.yml
  tags: jenkins

- name: configure jobs
  include: jobs.yml
  with_dict: "{{ jenkins_jobs }}"
  tags: jenkins