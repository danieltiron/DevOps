---
- name: Define jenkins_repo_url
  set_fact:
    jenkins_repo_url: deb https://pkg.jenkins.io/debian binary/
  when: jenkins_repo_url is not defined

- name: Define jenkins_repo_key_url
  set_fact:
    jenkins_repo_key_url: https://pkg.jenkins.io/debian/jenkins.io.key
  when: jenkins_repo_key_url is not defined

- name: Define jenkins_pkg_url
  set_fact:
    jenkins_pkg_url: https://pkg.jenkins.io/debian/binary
  when: jenkins_pkg_url is not defined

- name: Download specific Jenkins version.
  get_url:
    url: "{{ jenkins_pkg_url }}/jenkins_2.96_all.deb"
    dest: "/tmp/jenkins_2.96_all.deb"

- name: Check if we downloaded a specific version of Jenkins.
  stat:
    path: "/tmp/jenkins_2.96_all.deb"

- name: Install our specific version of Jenkins.
  apt:
    deb: "/tmp/jenkins_2.96_all.deb"
    state: installed
  register: is_installed

- name: Ensure Jenkins is installed.
  apt:
    name: jenkins
    state: present

- name: ensure jenkins.install.UpgradeWizard.state exists
  wait_for:
    path: /var/lib/jenkins/jenkins.install.UpgradeWizard.state
    state: present

- name: Create initialization scripts directory
  file: 
    path: /var/lib/jenkins/init.groovy.d
    state: directory
    owner: jenkins
    group: jenkins
    mode: 0775

- name: Add initialization script to setup basic security
  template: 
    src: security.groovy.j2
    dest: /var/lib/jenkins/init.groovy.d/security.groovy
  notify: restart jenkins  

- name: wait for initialAdminPassword
  wait_for: 
    path: /var/lib/jenkins/secrets/initialAdminPassword
    state: present
  when: is_installed.changed

- stat: 
    path: /var/lib/jenkins/secrets/initialAdminPassword
  register: adminpassword

- name: Bypass - initialAdminPassword
  shell: mv /var/lib/jenkins/secrets/initialAdminPassword /root
  notify:
    - restart jenkins
  when: adminpassword.stat.exists == True

- name: Bypass - jenkins.install.InstallUtil.lastExecVersion
  copy: 
    src: /var/lib/jenkins/jenkins.install.UpgradeWizard.state
    dest: /var/lib/jenkins/jenkins.install.InstallUtil.lastExecVersion
    owner: jenkins
    group: jenkins
    remote_src: True
  notify: restart jenkins

- name: Ensure Jenkins is started and runs on startup.
  service: name=jenkins state=started enabled=yes

- name: Wait for Jenkins to start up before proceeding.
  shell: "curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false

- name: wait for initialAdminPassword
  wait_for: 
    path: /var/lib/jenkins/config.xml
    state: present

- name: skip install plugin wizard
  lineinfile:
    dest: /var/lib/jenkins/config.xml
    regexp: '^\s*<name>NEW.*'
    line: '    <name>RUNNING</name>'
    backrefs: yes
  notify: restart jenkins

- name: Get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10

#install plugins
- name: Install Jenkins plugins using password.
  jenkins_plugin:
    name: git
    jenkins_home: /var/lib/jenkins
    params:
      url_username: "{{ jenkins_admin_username }}"
    url_password: "{{ jenkins_admin_password }}"
    state: "{{ jenkins_plugins_state }}"
    timeout: "{{ jenkins_plugin_timeout }}"
    updates_expiration: "{{ jenkins_plugin_updates_expiration }}"
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}"
  with_items: "{{ jenkins_plugins }}"
  when: jenkins_admin_password != ""
  notify: restart jenkins